<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Step-by-step Data Science (Posts about Dynamic Programming)</title><link>https://h1ros.github.io</link><description></description><atom:link href="/categories/dynamic-programming.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:data.h1ros@gmail.com"&gt;h1ros&lt;/a&gt; </copyright><lastBuildDate>Sun, 17 Jul 2022 18:36:38 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>1105. Filling Bookcase Shelves [Dynamic Programming]</title><link>/posts/coding/1105-filling-bookcase-shelves-dynamic-programming/</link><dc:creator>h1ros</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Goal"&gt;Goal&lt;a class="anchor-link" href="/posts/coding/1105-filling-bookcase-shelves-dynamic-programming/#Goal"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This post aims to describe the solution for &lt;a href="https://leetcode.com/contest/weekly-contest-143/problems/filling-bookcase-shelves/"&gt;1105. Filling Bookcase Shelves&lt;/a&gt; based on the solution by a respectful coder &lt;a href="https://leetcode.com/hexadecimal/"&gt;Hexadecimal&lt;/a&gt;. This problem could be solved by dynamic programming.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Problem"&gt;Problem&lt;a class="anchor-link" href="/posts/coding/1105-filling-bookcase-shelves-dynamic-programming/#Problem"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;We have a sequence of books: the i-th book has thickness &lt;code&gt;books[i][0]&lt;/code&gt; and height &lt;code&gt;books[i][1]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We want to place these books in order onto bookcase shelves that have total width shelf_width.&lt;/p&gt;
&lt;p&gt;We choose some of the books to place on this shelf (such that the sum of their thickness is &lt;code&gt;&amp;lt;= shelf_width&lt;/code&gt;), then build another level of shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down.  We repeat this process until there are no more books to place.&lt;/p&gt;
&lt;p&gt;Note again that at each step of the above process, the order of the books we place is the same order as the given sequence of books.  For example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.&lt;/p&gt;
&lt;p&gt;Return the minimum possible height that the total bookshelf can be after placing shelves in this manner.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/8764683/60392273-4e905100-9b3a-11e9-932d-ea7a64bf0dbc.png" style="height: 300px"&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="/posts/coding/1105-filling-bookcase-shelves-dynamic-programming/"&gt;Read more…&lt;/a&gt; (7 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>Dynamic Programming</category><guid>/posts/coding/1105-filling-bookcase-shelves-dynamic-programming/</guid><pubDate>Mon, 01 Jul 2019 04:10:48 GMT</pubDate></item><item><title>1039. Minimum Score Triangulation of Polygon</title><link>/posts/coding/1039-minimum-score-triangulation-of-polygon/</link><dc:creator>h1ros</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Problem-Setting"&gt;Problem Setting&lt;a class="anchor-link" href="/posts/coding/1039-minimum-score-triangulation-of-polygon/#Problem-Setting"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Given &lt;code&gt;N&lt;/code&gt;, consider a convex N-sided polygon with vertices labelled &lt;code&gt;A[0], A[i], ..., A[N-1]&lt;/code&gt; in clockwise order.&lt;/p&gt;
&lt;p&gt;Suppose you triangulate the polygon into &lt;code&gt;N-2&lt;/code&gt; triangles. For each triangle, the value of that triangle is the product of the labels of the vertices, and the total score of the triangulation is the sum of these values over all &lt;code&gt;N-2&lt;/code&gt; triangles in the triangulation.&lt;/p&gt;
&lt;p&gt;Return the smallest possible total score that you can achieve with some triangulation of the polygon.&lt;/p&gt;
&lt;p&gt;Source: LeetCode &lt;a href="https://leetcode.com/contest/weekly-contest-135/problems/minimum-score-triangulation-of-polygon/"&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/8764683/57565247-2de42000-736f-11e9-9111-6fab23625737.png" alt="image"&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The solution is based on dynamic programming like below. This gif is explained in the last part.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/8764683/57566298-b10d7200-737f-11e9-9fcf-564c0260ce29.gif" alt="2019-05-10_1039_dp_image1"&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="/posts/coding/1039-minimum-score-triangulation-of-polygon/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>Dynamic Programming</category><category>Pandas Styling</category><guid>/posts/coding/1039-minimum-score-triangulation-of-polygon/</guid><pubDate>Sat, 11 May 2019 04:20:04 GMT</pubDate></item><item><title>1036. Escape a Large Maze</title><link>/posts/coding/1036-escape-a-large-maze/</link><dc:creator>h1ros</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Problem-Setting"&gt;Problem Setting&lt;a class="anchor-link" href="/posts/coding/1036-escape-a-large-maze/#Problem-Setting"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In a 1 million by 1 million grid, the coordinates of each grid square are &lt;code&gt;(x, y)&lt;/code&gt; with &lt;code&gt;0 &amp;lt;= x, y &amp;lt; 10^6&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We start at the &lt;code&gt;source&lt;/code&gt; square and want to reach the &lt;code&gt;target&lt;/code&gt; square.  Each move, we can walk to a 4-directionally adjacent square in the grid that isn't in the given list of &lt;code&gt;blocked&lt;/code&gt; squares.&lt;/p&gt;
&lt;p&gt;Return &lt;code&gt;true&lt;/code&gt; if and only if it is possible to reach the target square through a sequence of moves&lt;/p&gt;
&lt;p&gt;Link for Problem: &lt;a href="https://leetcode.com/contest/weekly-contest-134/problems/escape-a-large-maze/"&gt;leetcode&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="Example-1:"&gt;Example 1:&lt;a class="anchor-link" href="/posts/coding/1036-escape-a-large-maze/#Example-1:"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Input: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]&lt;/p&gt;
&lt;p&gt;Output: false&lt;/p&gt;
&lt;p&gt;Explanation: 
The target square is inaccessible starting from the source square, because we can't walk outside the grid.&lt;/p&gt;
&lt;h3 id="Example-2:"&gt;Example 2:&lt;a class="anchor-link" href="/posts/coding/1036-escape-a-large-maze/#Example-2:"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Input: blocked = [], source = [0,0], target = [999999,999999]&lt;/p&gt;
&lt;p&gt;Output: true&lt;/p&gt;
&lt;p&gt;Explanation:&lt;/p&gt;
&lt;p&gt;Because there are no blocked cells, it's possible to reach the target square.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="/posts/coding/1036-escape-a-large-maze/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>Dynamic Programming</category><guid>/posts/coding/1036-escape-a-large-maze/</guid><pubDate>Thu, 02 May 2019 06:01:08 GMT</pubDate></item><item><title>1035. Uncrossed Lines</title><link>/posts/coding/1035-uncrossed-lines/</link><dc:creator>h1ros</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Problem-Setting"&gt;Problem Setting&lt;a class="anchor-link" href="/posts/coding/1035-uncrossed-lines/#Problem-Setting"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We write the integers of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; (in the order they are given) on two separate horizontal lines.&lt;/p&gt;
&lt;p&gt;Now, we may draw a straight line connecting two numbers &lt;code&gt;A[i]&lt;/code&gt; and &lt;code&gt;B[j]&lt;/code&gt; as long as &lt;code&gt;A[i] == B[j]&lt;/code&gt;, and the line we draw does not intersect any other connecting (non-horizontal) line.&lt;/p&gt;
&lt;p&gt;Return the maximum number of connecting lines we can draw in this way.&lt;/p&gt;
&lt;p&gt;Link for Problem: &lt;a href="https://leetcode.com/contest/weekly-contest-134/problems/uncrossed-lines/"&gt;leetcode&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="Example-1:"&gt;Example 1:&lt;a class="anchor-link" href="/posts/coding/1035-uncrossed-lines/#Example-1:"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/8764683/56871936-2f5d3200-69d8-11e9-9566-f9caafc555d2.png" alt="image"&gt;&lt;/p&gt;
&lt;p&gt;Input: A = [1,4,2], B = [1,2,4]&lt;/p&gt;
&lt;p&gt;Output: 2&lt;/p&gt;
&lt;p&gt;Explanation: We can draw 2 uncrossed lines as in the diagram.
We cannot draw 3 uncrossed lines, because the line from A[1]=4 to B[2]=4 will intersect the line from A[2]=2 to B[1]=2.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="/posts/coding/1035-uncrossed-lines/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>Dynamic Programming</category><guid>/posts/coding/1035-uncrossed-lines/</guid><pubDate>Mon, 29 Apr 2019 00:00:44 GMT</pubDate></item><item><title>1000. Minimum Cost to Merge Stones</title><link>/posts/coding/1000-minimum-cost-to-merge-stones/</link><dc:creator>h1ros</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Problem-Setting"&gt;Problem Setting&lt;a class="anchor-link" href="/posts/coding/1000-minimum-cost-to-merge-stones/#Problem-Setting"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are &lt;code&gt;N&lt;/code&gt; piles of stones arranged in a row.  The i-th pile has stones[i] stones.&lt;/p&gt;
&lt;p&gt;A move consists of merging exactly &lt;code&gt;K&lt;/code&gt; consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these &lt;code&gt;K&lt;/code&gt; piles.&lt;/p&gt;
&lt;p&gt;Find the minimum cost to merge all piles of stones into one pile.  If it is impossible, return -1.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th style="text-align:left"&gt;Variable&lt;/th&gt;
&lt;th style="text-align:center"&gt;Type&lt;/th&gt;
&lt;th style="text-align:left"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;stones&lt;/td&gt;
&lt;td style="text-align:center"&gt;list&lt;/td&gt;
&lt;td style="text-align:left"&gt;an array of stones with the merging cost&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align:left"&gt;K&lt;/td&gt;
&lt;td style="text-align:center"&gt;int&lt;/td&gt;
&lt;td style="text-align:left"&gt;the maximum number of consecutive piles&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Interactive-Python-Execution"&gt;Interactive Python Execution&lt;a class="anchor-link" href="/posts/coding/1000-minimum-cost-to-merge-stones/#Interactive-Python-Execution"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;a href="http://pythontutor.com/"&gt;Pythontutor&lt;/a&gt; is an awesome website which allows us to execute the code and visualize the flow of the code and variables taking account into data structure and stored values.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://goo.gl/Jjbj8Q"&gt;https://goo.gl/Jjbj8Q&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IFrame&lt;/span&gt;
&lt;span class="n"&gt;IFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"https://pythontutor.com/iframe-embed.html#code=class%20Solution&lt;/span&gt;&lt;span class="si"&gt;%28o&lt;/span&gt;&lt;span class="s2"&gt;bject&lt;/span&gt;&lt;span class="si"&gt;%29%&lt;/span&gt;&lt;span class="s2"&gt;3A%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20def%20mergeStones&lt;/span&gt;&lt;span class="si"&gt;%28s&lt;/span&gt;&lt;span class="s2"&gt;elf,%20A,%20K&lt;/span&gt;&lt;span class="si"&gt;%29%&lt;/span&gt;&lt;span class="s2"&gt;3A%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20N&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;3D&lt;/span&gt;&lt;span class="si"&gt;%20le&lt;/span&gt;&lt;span class="s2"&gt;n%28A&lt;/span&gt;&lt;span class="si"&gt;%29%&lt;/span&gt;&lt;span class="s2"&gt;0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20if&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;28N%20-&lt;/span&gt;&lt;span class="si"&gt;%201%&lt;/span&gt;&lt;span class="s2"&gt;29&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;25&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;28K%20-&lt;/span&gt;&lt;span class="si"&gt;%201%&lt;/span&gt;&lt;span class="s2"&gt;29%3A&lt;/span&gt;&lt;span class="si"&gt;%20r&lt;/span&gt;&lt;span class="s2"&gt;eturn%20-1%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20INF&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;3D&lt;/span&gt;&lt;span class="si"&gt;%20f&lt;/span&gt;&lt;span class="s2"&gt;loat%28'inf'&lt;/span&gt;&lt;span class="si"&gt;%29%&lt;/span&gt;&lt;span class="s2"&gt;0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20memo&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;3D&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;7B%7D%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20prefix&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;3D&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;5B0%5D&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;23%20prefix&lt;/span&gt;&lt;span class="si"&gt;%20s&lt;/span&gt;&lt;span class="s2"&gt;um%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20for&lt;/span&gt;&lt;span class="si"&gt;%20x%20i&lt;/span&gt;&lt;span class="s2"&gt;n%20A%3A%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20prefix.append%28prefix%5B-1%5D&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;2B&lt;/span&gt;&lt;span class="si"&gt;%20x%29%&lt;/span&gt;&lt;span class="s2"&gt;0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20def&lt;/span&gt;&lt;span class="si"&gt;%20d&lt;/span&gt;&lt;span class="s2"&gt;p&lt;/span&gt;&lt;span class="si"&gt;%28i&lt;/span&gt;&lt;span class="s2"&gt;,%20j,%20m&lt;/span&gt;&lt;span class="si"&gt;%29%&lt;/span&gt;&lt;span class="s2"&gt;3A%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20if&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;28j%20-&lt;/span&gt;&lt;span class="si"&gt;%20i%20%&lt;/span&gt;&lt;span class="s2"&gt;2B&lt;/span&gt;&lt;span class="si"&gt;%201%&lt;/span&gt;&lt;span class="s2"&gt;20-%20m&lt;/span&gt;&lt;span class="si"&gt;%29%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%25%&lt;/span&gt;&lt;span class="s2"&gt;20%28K%20-&lt;/span&gt;&lt;span class="si"&gt;%201%&lt;/span&gt;&lt;span class="s2"&gt;29%3A&lt;/span&gt;&lt;span class="si"&gt;%20r&lt;/span&gt;&lt;span class="s2"&gt;eturn%20INF&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%23%&lt;/span&gt;&lt;span class="s2"&gt;20optimize%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20if&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;28i,%20j,%20m&lt;/span&gt;&lt;span class="si"&gt;%29%&lt;/span&gt;&lt;span class="s2"&gt;20in%20memo%3A%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20return%20memo%5Bi,%20j,%20m%5D%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20if&lt;/span&gt;&lt;span class="si"&gt;%20i%20%&lt;/span&gt;&lt;span class="s2"&gt;3D%3D%20j%3A%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20res&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;3D&lt;/span&gt;&lt;span class="si"&gt;%200%&lt;/span&gt;&lt;span class="s2"&gt;20if%20m&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;3D%3D&lt;/span&gt;&lt;span class="si"&gt;%201%&lt;/span&gt;&lt;span class="s2"&gt;20else%20INF%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20else%3A%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20if%20m&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;3D%3D&lt;/span&gt;&lt;span class="si"&gt;%201%&lt;/span&gt;&lt;span class="s2"&gt;3A%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20res&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;3D&lt;/span&gt;&lt;span class="si"&gt;%20d&lt;/span&gt;&lt;span class="s2"&gt;p&lt;/span&gt;&lt;span class="si"&gt;%28i&lt;/span&gt;&lt;span class="s2"&gt;,%20j,%20K&lt;/span&gt;&lt;span class="si"&gt;%29%&lt;/span&gt;&lt;span class="s2"&gt;20%2B%20prefix%5Bj&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;2B&lt;/span&gt;&lt;span class="si"&gt;%201%&lt;/span&gt;&lt;span class="s2"&gt;5D%20-%20prefix%5Bi%5D%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20else%3A%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20res&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;3D%20INF%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20for%20mid&lt;/span&gt;&lt;span class="si"&gt;%20i&lt;/span&gt;&lt;span class="s2"&gt;n&lt;/span&gt;&lt;span class="si"&gt;%20r&lt;/span&gt;&lt;span class="s2"&gt;ange&lt;/span&gt;&lt;span class="si"&gt;%28i&lt;/span&gt;&lt;span class="s2"&gt;,%20j,%20K%20-&lt;/span&gt;&lt;span class="si"&gt;%201%&lt;/span&gt;&lt;span class="s2"&gt;29%3A%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20res&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;3D%20min&lt;/span&gt;&lt;span class="si"&gt;%28r&lt;/span&gt;&lt;span class="s2"&gt;es,&lt;/span&gt;&lt;span class="si"&gt;%20d&lt;/span&gt;&lt;span class="s2"&gt;p&lt;/span&gt;&lt;span class="si"&gt;%28i&lt;/span&gt;&lt;span class="s2"&gt;,%20mid,&lt;/span&gt;&lt;span class="si"&gt;%201%&lt;/span&gt;&lt;span class="s2"&gt;29&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;2B&lt;/span&gt;&lt;span class="si"&gt;%20d&lt;/span&gt;&lt;span class="s2"&gt;p%28mid&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;2B%201,%20j,%20m%20-&lt;/span&gt;&lt;span class="si"&gt;%201%&lt;/span&gt;&lt;span class="s2"&gt;29&lt;/span&gt;&lt;span class="si"&gt;%29%&lt;/span&gt;&lt;span class="s2"&gt;0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20memo%5Bi,%20j,%20m%5D&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;3D&lt;/span&gt;&lt;span class="si"&gt;%20r&lt;/span&gt;&lt;span class="s2"&gt;es%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20return&lt;/span&gt;&lt;span class="si"&gt;%20r&lt;/span&gt;&lt;span class="s2"&gt;es%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20res&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;3D&lt;/span&gt;&lt;span class="si"&gt;%20d&lt;/span&gt;&lt;span class="s2"&gt;p%280,%20N%20-%201,&lt;/span&gt;&lt;span class="si"&gt;%201%&lt;/span&gt;&lt;span class="s2"&gt;29%0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20return&lt;/span&gt;&lt;span class="si"&gt;%20r&lt;/span&gt;&lt;span class="s2"&gt;es&lt;/span&gt;&lt;span class="si"&gt;%20i&lt;/span&gt;&lt;span class="s2"&gt;f&lt;/span&gt;&lt;span class="si"&gt;%20r&lt;/span&gt;&lt;span class="s2"&gt;es&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;3C%20INF&lt;/span&gt;&lt;span class="si"&gt;%20e&lt;/span&gt;&lt;span class="s2"&gt;lse&lt;/span&gt;&lt;span class="si"&gt;%200%&lt;/span&gt;&lt;span class="s2"&gt;0A&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;20%0Astones&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;3D&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;5B3,5,1,2,6%5D%0AK&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;3D&lt;/span&gt;&lt;span class="si"&gt;%203%&lt;/span&gt;&lt;span class="s2"&gt;0As&lt;/span&gt;&lt;span class="si"&gt;%20%&lt;/span&gt;&lt;span class="s2"&gt;3D%20Solution&lt;/span&gt;&lt;span class="si"&gt;%28%&lt;/span&gt;&lt;span class="s2"&gt;29%0As.mergeStones&lt;/span&gt;&lt;span class="si"&gt;%28s&lt;/span&gt;&lt;span class="s2"&gt;tones,%20K%29&amp;amp;codeDivHeight=400&amp;amp;codeDivWidth=350&amp;amp;cumulative=false&amp;amp;curInstr=0&amp;amp;heapPrimitives=nevernest&amp;amp;origin=opt-frontend.js&amp;amp;py=3&amp;amp;rawInputLstJSON=%5B%5D&amp;amp;textReferences=false"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt output_prompt"&gt;Out[1]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;

        &lt;iframe width="1000" height="500" src="https://pythontutor.com/iframe-embed.html#code=class%20Solution%28object%29%3A%0A%20%20%20%20def%20mergeStones%28self,%20A,%20K%29%3A%0A%20%20%20%20%20%20%20%20N%20%3D%20len%28A%29%0A%20%20%20%20%20%20%20%20if%20%28N%20-%201%29%20%25%20%28K%20-%201%29%3A%20return%20-1%0A%20%20%20%20%20%20%20%20INF%20%3D%20float%28'inf'%29%0A%20%20%20%20%20%20%20%20memo%20%3D%20%7B%7D%0A%20%20%20%20%20%20%20%20prefix%20%3D%20%5B0%5D%20%23%20prefix%20sum%0A%20%20%20%20%20%20%20%20for%20x%20in%20A%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20prefix.append%28prefix%5B-1%5D%20%2B%20x%29%0A%20%20%20%20%20%20%20%20def%20dp%28i,%20j,%20m%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20%28j%20-%20i%20%2B%201%20-%20m%29%20%25%20%28K%20-%201%29%3A%20return%20INF%20%20%23%20optimize%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20%28i,%20j,%20m%29%20in%20memo%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%20memo%5Bi,%20j,%20m%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20i%20%3D%3D%20j%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20res%20%3D%200%20if%20m%20%3D%3D%201%20else%20INF%0A%20%20%20%20%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20if%20m%20%3D%3D%201%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20res%20%3D%20dp%28i,%20j,%20K%29%20%2B%20prefix%5Bj%20%2B%201%5D%20-%20prefix%5Bi%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20else%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20res%20%3D%20INF%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for%20mid%20in%20range%28i,%20j,%20K%20-%201%29%3A%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20res%20%3D%20min%28res,%20dp%28i,%20mid,%201%29%20%2B%20dp%28mid%20%2B%201,%20j,%20m%20-%201%29%29%0A%20%20%20%20%20%20%20%20%20%20%20%20memo%5Bi,%20j,%20m%5D%20%3D%20res%0A%20%20%20%20%20%20%20%20%20%20%20%20return%20res%0A%20%20%20%20%20%20%20%20res%20%3D%20dp%280,%20N%20-%201,%201%29%0A%20%20%20%20%20%20%20%20return%20res%20if%20res%20%3C%20INF%20else%200%0A%20%20%20%20%20%20%20%20%0Astones%20%3D%20%5B3,5,1,2,6%5D%0AK%20%3D%203%0As%20%3D%20Solution%28%29%0As.mergeStones%28stones,%20K%29&amp;amp;codeDivHeight=400&amp;amp;codeDivWidth=350&amp;amp;cumulative=false&amp;amp;curInstr=0&amp;amp;heapPrimitives=nevernest&amp;amp;origin=opt-frontend.js&amp;amp;py=3&amp;amp;rawInputLstJSON=%5B%5D&amp;amp;textReferences=false" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;
        
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;&lt;a href="/posts/coding/1000-minimum-cost-to-merge-stones/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description><category>Dynamic Programming</category><guid>/posts/coding/1000-minimum-cost-to-merge-stones/</guid><pubDate>Sun, 03 Mar 2019 04:52:36 GMT</pubDate></item></channel></rss>